;fit_time;score_time;estimator;test_roc_auc;train_roc_auc;test_average_precision;train_average_precision;test_f1;train_f1;test_precision;train_precision;test_recall;train_recall;test_balanced_accuracy;train_balanced_accuracy;n_train;n_test;repeat;fold;cv_mdsum
0;0.008426904678344727;0.012003898620605469;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7297907259392403,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7297907259392403,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.610428275977153;0.600035731994851;0.45693601227234254;0.43806907365610803;0.0;0.0;0.0;0.0;0.0;0.0;0.4997833622183709;0.49972908539228433;14508;3627;0;0;0e771c1190ea4a0ce23c7d5b46c62924
1;0.009181976318359375;0.0074999332427978516;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7298542239440068,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7298542239440068,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5977001812665012;0.6032154300181009;0.4331347121288023;0.44408918878939185;0.036284470246734396;0.03216374269005848;0.43103448275862066;0.45595854922279794;0.01893939393939394;0.016669823830270884;0.5023175513260039;0.5026463216019921;14508;3627;0;1;0e771c1190ea4a0ce23c7d5b46c62924
2;0.009292840957641602;0.0074100494384765625;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7296649608184366,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7296649608184366,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6020784897085287;0.6021576895564074;0.4406497692961457;0.44220418933383393;0.010486891385767791;0.013813701698711966;0.4666666666666667;0.47435897435897434;0.005303030303030303;0.007008903201363895;0.500917661662135;0.5012831925260259;14508;3627;0;2;0e771c1190ea4a0ce23c7d5b46c62924
3;0.009882926940917969;0.0074880123138427734;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7298339572629323,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7298339572629323,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5921431479949035;0.6045903407296211;0.436777298733952;0.44339839393275626;0.05003573981415296;0.05522893283449136;0.4430379746835443;0.46407185628742514;0.026515151515151516;0.029361621519227128;0.503721381565985;0.5049831187019692;14508;3627;0;3;0e771c1190ea4a0ce23c7d5b46c62924
4;0.007472991943359375;0.0073659420013427734;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7298265135079708,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7298265135079708,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6083300495199067;0.6005488497500948;0.4470364696624688;0.4409317272340253;0.029304029304029304;0.03321774046358825;0.4444444444444444;0.455;0.015151515151515152;0.017238113279030118;0.5021574654214447;0.5027137581239662;14508;3627;0;4;0e771c1190ea4a0ce23c7d5b46c62924
5;0.008844137191772461;0.007468700408935547;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.729791360873912,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.729791360873912,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5900345963474771;0.6051200192759848;0.43267305421096725;0.44429868758962754;0.047584715212689255;0.04122965641952984;0.4852941176470588;0.456;0.025018953752843062;0.02159090909090909;0.5049271545194025;0.5034265772155889;14508;3627;1;0;0e771c1190ea4a0ce23c7d5b46c62924
6;0.008033037185668945;0.011708974838256836;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7297485550249445,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7297485550249445,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5903950099171166;0.6050298018934401;0.4320996136607348;0.4444590114543368;0.029390154298310066;0.033885953725633085;0.4878048780487805;0.44285714285714284;0.015151515151515152;0.017616972911536275;0.5030243921661347;0.5024697715354084;14508;3627;1;1;0e771c1190ea4a0ce23c7d5b46c62924
7;0.008076667785644531;0.008541345596313477;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7298043497685968,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7298043497685968,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6131249096951308;0.5992532906118365;0.4599510799793529;0.43756820027215737;0.007541478129713424;0.005274062912036165;0.8333333333333334;0.4666666666666667;0.003787878787878788;0.002652017427543095;0.5016772077077669;0.5004591759041497;14508;3627;1;2;0e771c1190ea4a0ce23c7d5b46c62924
8;0.007925987243652344;0.0073719024658203125;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7298027004682182,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7298027004682182,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6102492742772326;0.6000701848860869;0.43952611063858804;0.44270047171651233;0.0333091962346126;0.028671200147031797;0.3770491803278688;0.48148148148148145;0.017424242424242425;0.014775525667740102;0.5004763171375655;0.5028368905833553;14508;3627;1;3;0e771c1190ea4a0ce23c7d5b46c62924
9;0.008324861526489258;0.007444858551025391;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7298321330885275,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7298321330885275,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.606475844268432;0.6010497129396287;0.45048798906514737;0.43964539855113816;0.020833333333333332;0.018168335187245088;0.5833333333333334;0.4260869565217391;0.010606060606060607;0.009282060996400833;0.5031357134413051;0.5010653451585103;14508;3627;1;4;0e771c1190ea4a0ce23c7d5b46c62924
10;0.014483928680419922;0.008221864700317383;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7298884175245305,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7298884175245305,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.605719730166885;0.6011752768254719;0.444014155390284;0.4413309720866972;0.01636904761904762;0.01709084153817574;0.44;0.44660194174757284;0.008339651250947688;0.008712121212121213;0.5011368966826663;0.5012676340781023;14508;3627;2;0;0e771c1190ea4a0ce23c7d5b46c62924
11;0.00817418098449707;0.00745391845703125;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7297969806983313,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7297969806983313,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6051818575875794;0.601348543657456;0.444337693116615;0.44145166525130347;0.023564064801178203;0.02434526005164146;0.42105263157894735;0.46153846153846156;0.012121212121212121;0.012502367872703164;0.5012925089648107;0.5020795510400464;14508;3627;2;1;0e771c1190ea4a0ce23c7d5b46c62924
12;0.011245965957641602;0.011079072952270508;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7299460088403043,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7299460088403043,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5882109456069144;0.6055651889697372;0.43567420689336156;0.4434072987923009;0.05021520803443329;0.049068767908309455;0.47297297297297297;0.4491803278688525;0.026515151515151516;0.02595188482667172;0.5048050399968476;0.5038741979123065;14508;3627;2;2;0e771c1190ea4a0ce23c7d5b46c62924
13;0.008337974548339844;0.007428169250488281;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7295813962197422,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7295813962197422,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6073912072611682;0.6008230190826986;0.4493806568989258;0.43983438428167815;0.019316493313521546;0.011597456041900486;0.5;0.4626865671641791;0.009848484848484848;0.005872324303845425;0.5021067305039997;0.5009857883302735;14508;3627;2;3;0e771c1190ea4a0ce23c7d5b46c62924
14;0.008352041244506836;0.007995128631591797;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7297465961340831,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7297465961340831,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6040051030460654;0.6016253094654912;0.43975148484585047;0.44253541901092175;0.016320474777448073;0.01638733705772812;0.39285714285714285;0.4835164835164835;0.008333333333333333;0.008334911915135442;0.5004822280017339;0.5016211345793036;14508;3627;2;4;0e771c1190ea4a0ce23c7d5b46c62924
15;0.010655879974365234;0.007529020309448242;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7300115434770656,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7300115434770656,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5992836663981824;0.6027895892441975;0.44481860304708376;0.44110408117199;0.03924418604651163;0.03563636363636364;0.47368421052631576;0.44545454545454544;0.02047005307050796;0.018560606060606062;0.5037358930863804;0.5026699866020412;14508;3627;3;0;0e771c1190ea4a0ce23c7d5b46c62924
16;0.01361083984375;0.008149147033691406;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7295537388837915,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7295537388837915,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5974437154378637;0.6032786280248451;0.4336756512960102;0.4439327403881248;0.036284470246734396;0.042360608254887765;0.43103448275862066;0.4775510204081633;0.01893939393939394;0.022163288501610152;0.5023175513260039;0.5041469817738303;14508;3627;3;1;0e771c1190ea4a0ce23c7d5b46c62924
17;0.012144804000854492;0.009332895278930664;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7300398187608141,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7300398187608141,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6110809000275841;0.5998736737732029;0.4481546707442851;0.4403050799666217;0.0015117157974300832;0.0037742970371768257;0.3333333333333333;0.5;0.0007575757575757576;0.0018942981625307824;0.49994532450644286;0.5004053785752517;14508;3627;3;2;0e771c1190ea4a0ce23c7d5b46c62924
18;0.009533882141113281;0.007703065872192383;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.729728968481659,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.729728968481659,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6005057072677358;0.6025243673061583;0.44340446517615695;0.4416112885756008;0.02223869532987398;0.015619189289698772;0.5172413793103449;0.42424242424242425;0.011363636363636364;0.007956052282629286;0.502647574575403;0.5008899342570368;14508;3627;3;3;0e771c1190ea4a0ce23c7d5b46c62924
19;0.010130882263183594;0.0077478885650634766;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7296267496612618,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7296267496612618,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6022461283839697;0.6020742841973927;0.4435189713411677;0.4416267144811853;0.01915991156963891;0.028644876973925818;0.35135135135135137;0.46706586826347307;0.009848484848484848;0.014775525667740102;0.499722681956102;0.5025660053303486;14508;3627;3;4;0e771c1190ea4a0ce23c7d5b46c62924
20;0.01043701171875;0.00807499885559082;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7299108223460801,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7299108223460801,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6025470296151567;0.6020298892698113;0.4413703198742397;0.44202455196548635;0.008968609865470852;0.017857142857142856;0.3157894736842105;0.5;0.004548900682335102;0.00909090909090909;0.4994581591799891;0.5019446743113843;14508;3627;4;0;0e771c1190ea4a0ce23c7d5b46c62924
21;0.009506702423095703;0.011433124542236328;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7297374797075166,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7297374797075166,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5989110874676544;0.6028945343904812;0.4469488749114953;0.44080287132114104;0.032281731474688186;0.02536764705882353;0.5116279069767442;0.42857142857142855;0.016666666666666666;0.013070657321462398;0.5037819679237104;0.5015510400054055;14508;3627;4;1;0e771c1190ea4a0ce23c7d5b46c62924
22;0.008002042770385742;0.009785175323486328;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7296427441442199,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7296427441442199,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5944946867898753;0.6040188800915011;0.4348206242198169;0.44361119681360317;0.029175784099197667;0.04096429218778322;0.39215686274509803;0.47478991596638653;0.015151515151515152;0.02140556923659784;0.5008570753044095;0.5039306532931283;14508;3627;4;2;0e771c1190ea4a0ce23c7d5b46c62924
23;0.03664088249206543;0.007595062255859375;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7298593516172607,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7298593516172607,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6021917812717552;0.6021177058873142;0.4403848302806712;0.44221771109484564;0.04072727272727273;0.03035289815322728;0.509090909090909;0.4368421052631579;0.021212121212121213;0.015722674749005492;0.5047543050794026;0.5020643929601567;14508;3627;4;3;0e771c1190ea4a0ce23c7d5b46c62924
24;0.008149147033691406;0.007343769073486328;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7298233970005744,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7298233970005744,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6125786473315732;0.5994897238173214;0.44981541830923377;0.43992155033984337;0.013462976813762155;0.010871602624179943;0.5294117647058824;0.5178571428571429;0.006818181818181818;0.005493464671339269;0.5016752374197108;0.5012839519694328;14508;3627;4;4;0e771c1190ea4a0ce23c7d5b46c62924
