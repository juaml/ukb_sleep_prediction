;fit_time;score_time;estimator;test_roc_auc;train_roc_auc;test_average_precision;train_average_precision;test_f1;train_f1;test_precision;train_precision;test_recall;train_recall;test_balanced_accuracy;train_balanced_accuracy;n_train;n_test;repeat;fold;cv_mdsum
0;0.007639169692993164;0.01159811019897461;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7304516940685192,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7304516940685192,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6742858875614046;0.6909424576091243;0.4026236979305024;0.4303738664644099;0.17597292724196278;0.20435510887772193;0.5416666666666666;0.5980392156862745;0.10505050505050505;0.12323232323232323;0.537848801557941;0.5479358146024812;7974;1994;0;0;0e771c1190ea4a0ce23c7d5b46c62924
1;0.011691093444824219;0.006506919860839844;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7301635313578241,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7301635313578241,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.68245833922952;0.6888964301001337;0.43351961758156;0.422918061219049;0.22479338842975208;0.18081023454157782;0.6181818181818182;0.5808219178082191;0.13737373737373737;0.10707070707070707;0.5546775291271622;0.5407725907725908;7974;1994;0;1;0e771c1190ea4a0ce23c7d5b46c62924
2;0.005899906158447266;0.00637507438659668;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7299284623837584,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7299284623837584,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6733081313468238;0.6911480925369815;0.40973167389570725;0.4289540264562714;0.16151202749140894;0.20775969962453067;0.5402298850574713;0.5971223021582733;0.09494949494949495;0.12575757575757576;0.534132519322646;0.5488647738647738;7974;1994;0;2;0e771c1190ea4a0ce23c7d5b46c62924
3;0.008717060089111328;0.01203608512878418;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7301722378678898,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7301722378678898,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.687285404107834;0.687558318801021;0.4321985133470678;0.4227661368032406;0.2010221465076661;0.17988064791133845;0.6413043478260869;0.5765027322404371;0.1191919191919192;0.10656565656565657;0.5485812733476285;0.5403553887498842;7975;1993;0;3;0e771c1190ea4a0ce23c7d5b46c62924
4;0.00909113883972168;0.0075800418853759766;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7303507294423615,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7303507294423615,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.7188911815080039;0.6797814677214177;0.448987140062469;0.4184768067356688;0.16433566433566432;0.15641476274165203;0.6103896103896104;0.6013513513513513;0.09494949494949495;0.0898989898989899;0.537461396339901;0.5351079603373181;7975;1993;0;4;0e771c1190ea4a0ce23c7d5b46c62924
5;0.016119003295898438;0.012855052947998047;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7302285453107609,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7302285453107609,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.678015646794833;0.6901238359571693;0.398219086146539;0.43265879299951143;0.175787728026534;0.20454545454545456;0.49074074074074076;0.6136363636363636;0.10707070707070707;0.12272727272727273;0.5351897898262141;0.5486008736008736;7974;1994;1;0;0e771c1190ea4a0ce23c7d5b46c62924
6;0.005830287933349609;0.011749744415283203;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7302559114146471,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7302559114146471,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.699915768761666;0.6845479738998257;0.44582852514124394;0.4201408628093548;0.1952054794520548;0.16997411561691114;0.6404494382022472;0.5828402366863905;0.11515151515151516;0.0994949494949495;0.5469019750540765;0.537985712985713;7974;1994;1;1;0e771c1190ea4a0ce23c7d5b46c62924
7;0.00723719596862793;0.006697893142700195;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7303106829158669,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7303106829158669,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.7109001960903228;0.6816956687327058;0.47361092773109603;0.41312684694835755;0.1705150976909414;0.1549234135667396;0.7058823529411765;0.580327868852459;0.09696969696969697;0.0893939393939394;0.5418137344087978;0.5340196256862924;7974;1994;1;2;0e771c1190ea4a0ce23c7d5b46c62924
8;0.007627010345458984;0.006556987762451172;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7300971458147197,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7300971458147197,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6608434141144421;0.6940052737550653;0.3975796982526321;0.43277498499285527;0.20462046204620463;0.21726559273027674;0.5585585585585585;0.5963718820861678;0.12525252525252525;0.13282828282828282;0.5462711224393467;0.5515684366601797;7975;1993;1;3;0e771c1190ea4a0ce23c7d5b46c62924
9;0.006995201110839844;0.006276845932006836;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7301876734854532,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7301876734854532,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.684770940378417;0.6882247832789952;0.42184762262105274;0.425560873627684;0.18024263431542462;0.1794105083297736;0.6341463414634146;0.5817174515235457;0.10505050505050505;0.10606060606060606;0.5425119013904061;0.5404364748401446;7975;1993;1;4;0e771c1190ea4a0ce23c7d5b46c62924
10;0.006426811218261719;0.00617218017578125;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7303492279800724,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7303492279800724,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6631660164015067;0.6938743457261976;0.41254408366586603;0.42837652319213004;0.22549019607843138;0.20623700623700625;0.5897435897435898;0.5835294117647059;0.1393939393939394;0.12525252525252525;0.553686295914448;0.5478614978614978;7974;1994;2;0;0e771c1190ea4a0ce23c7d5b46c62924
11;0.006497859954833984;0.006208896636962891;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7303908269092758,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7303908269092758,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6995087634180363;0.6846424286239101;0.43744178311914805;0.4220396514307594;0.1686746987951807;0.1766479965532098;0.5697674418604651;0.6011730205278593;0.09898989898989899;0.10353535353535354;0.5371533884542558;0.540422998756332;7974;1994;2;1;0e771c1190ea4a0ce23c7d5b46c62924
12;0.0056650638580322266;0.006222963333129883;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7301170900826234,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7301170900826234,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6833276056091266;0.6887844915622694;0.4175828800353978;0.42657873398639135;0.16112084063047286;0.18406476352790796;0.6052631578947368;0.5885558583106267;0.09292929292929293;0.10909090909090909;0.5364579753505704;0.5419495252828586;7974;1994;2;2;0e771c1190ea4a0ce23c7d5b46c62924
13;0.0058591365814208984;0.00619196891784668;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7302067534907101,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7302067534907101,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6893312295181454;0.6872235701468394;0.4192282490963082;0.4267713502073534;0.1697792869269949;0.18771331058020477;0.5319148936170213;0.6043956043956044;0.10101010101010101;0.1111111111111111;0.5358188021739424;0.5435455472152719;7975;1993;2;3;0e771c1190ea4a0ce23c7d5b46c62924
14;0.00979471206665039;0.006325960159301758;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7300064717830278,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7300064717830278,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.7031206591954255;0.6837617206257741;0.44674826897238323;0.4199514219224829;0.1849912739965096;0.16774751405101598;0.6794871794871795;0.5825825825825826;0.10707070707070707;0.09797979797979799;0.5451908942563148;0.5373969048280975;7975;1993;2;4;0e771c1190ea4a0ce23c7d5b46c62924
15;0.012125015258789062;0.006364107131958008;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7300253665912437,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7300253665912437,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.682985963706444;0.6888576286724435;0.4243490362898379;0.42592766054068687;0.16206896551724137;0.18391787852865696;0.5529411764705883;0.6005586592178771;0.09494949494949495;0.10858585858585859;0.5347996307302512;0.5423643340310007;7974;1994;3;0;0e771c1190ea4a0ce23c7d5b46c62924
16;0.00558781623840332;0.008861064910888672;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7301646972061602,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7301646972061602,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6809630662866153;0.689364617142395;0.4265815785645104;0.42511206347599495;0.18088737201365188;0.19204737732656516;0.5824175824175825;0.5911458333333334;0.10707070707070707;0.11464646464646465;0.5408602367908572;0.5442268025601359;7974;1994;3;1;0e771c1190ea4a0ce23c7d5b46c62924
17;0.009032964706420898;0.00874018669128418;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.730177344376344,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.730177344376344,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6812750587934043;0.6892079790227938;0.4243960189724863;0.42506547514030457;0.19561551433389546;0.18837505303351718;0.5918367346938775;0.5888594164456233;0.11717171717171718;0.11212121212121212;0.5452436304337572;0.5431310097976765;7974;1994;3;2;0e771c1190ea4a0ce23c7d5b46c62924
18;0.013687849044799805;0.007287025451660156;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7305384430447472,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7305384430447472,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6990903696511174;0.6848494957919478;0.44994080917154977;0.41867027269419027;0.1955403087478559;0.16990081931867185;0.6477272727272727;0.5811209439528023;0.11515151515151516;0.0994949494949495;0.5472286280697496;0.537904272078584;7975;1993;3;3;0e771c1190ea4a0ce23c7d5b46c62924
19;0.0057260990142822266;0.006593942642211914;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.73015858963065,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.73015858963065,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6939650173295033;0.6859800675647214;0.4145994794126927;0.4294995644935833;0.18855218855218855;0.18298418127404875;0.5656565656565656;0.596100278551532;0.11313131313131314;0.10808080808080808;0.5422131866057099;0.541946992864424;7975;1993;3;4;0e771c1190ea4a0ce23c7d5b46c62924
20;0.00586390495300293;0.006342172622680664;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.73004724399623,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.73004724399623,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6876294634133193;0.6876118964081928;0.4305356490828019;0.4237800319902793;0.17435897435897435;0.18654173764906304;0.5666666666666667;0.595108695652174;0.10303030303030303;0.11060606060606061;0.5385064790668527;0.5428739345406012;7974;1994;4;0;0e771c1190ea4a0ce23c7d5b46c62924
21;0.008011817932128906;0.01352691650390625;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7304107711228219,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7304107711228219,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.676617408238489;0.6903168319834987;0.4132655980242487;0.4281149057407563;0.1870748299319728;0.19596299411269974;0.5913978494623656;0.585427135678392;0.1111111111111111;0.11767676767676767;0.5428804388110592;0.54507462007462;7974;1994;4;1;0e771c1190ea4a0ce23c7d5b46c62924
22;0.007758140563964844;0.015359878540039062;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7298584679660969,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7298584679660969,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6934313111097634;0.6861310384458533;0.44221551643641926;0.420730958643756;0.18024263431542462;0.17376344086021506;0.6341463414634146;0.5855072463768116;0.10505050505050505;0.10202020202020202;0.5425185814111765;0.5390815057481725;7974;1994;4;2;0e771c1190ea4a0ce23c7d5b46c62924
23;0.006122112274169922;0.007294178009033203;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7303323850174593,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7303323850174593,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.6742316354465887;0.6910060993588933;0.4047820145909885;0.42954753281787916;0.17687074829931973;0.1984861227922624;0.5591397849462365;0.592964824120603;0.10505050505050505;0.1191919191919192;0.538840339307629;0.5460847002131406;7975;1993;4;3;0e771c1190ea4a0ce23c7d5b46c62924
24;0.006275177001953125;0.006387948989868164;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7304070252586755,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7304070252586755,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.704970937681218;0.6832313544115045;0.4379389501610793;0.4214509563198937;0.20469798657718122;0.16760746851932262;0.6039603960396039;0.5975232198142415;0.12323232323232323;0.09747474747474748;0.5482650267696997;0.53789500509684;7975;1993;4;4;0e771c1190ea4a0ce23c7d5b46c62924
