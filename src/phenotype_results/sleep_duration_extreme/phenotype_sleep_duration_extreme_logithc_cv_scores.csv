;fit_time;score_time;estimator;test_roc_auc;train_roc_auc;test_average_precision;train_average_precision;test_f1;train_f1;test_precision;train_precision;test_recall;train_recall;test_balanced_accuracy;train_balanced_accuracy;n_train;n_test;repeat;fold;cv_mdsum
0;0.0077419281005859375;0.007694244384765625;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.730226521338127,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.730226521338127,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5512174674863677;0.5737947568407894;0.6436811968277496;0.6498094951929891;0.7271695972773681;0.7290709996467679;0.5987856141989725;0.5987468090044094;0.9256317689530686;0.9319125880440672;0.5135481020497561;0.5139301502311839;9362;2341;0;0;0e771c1190ea4a0ce23c7d5b46c62924
1;0.0061190128326416016;0.008604049682617188;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7304243875467951,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7304243875467951,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5719257435463649;0.5687462241533783;0.6538761520746648;0.6469595436586424;0.730790802019069;0.7310789049919485;0.5974323704722604;0.5969586096501258;0.9407942238267148;0.9429293841430377;0.5111920909928553;0.5106803783460286;9362;2341;0;1;0e771c1190ea4a0ce23c7d5b46c62924
2;0.006566762924194336;0.008105993270874023;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7306009941108345,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7306009941108345,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5518139839696548;0.5737742353703813;0.6257659083706413;0.6545112316126315;0.7233681831025713;0.7292331701780521;0.5939675174013921;0.6005374459633135;0.9248554913294798;0.9281328999638859;0.5052699609207483;0.5170214709024451;9362;2341;0;2;0e771c1190ea4a0ce23c7d5b46c62924
3;0.007982015609741211;0.010854959487915039;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7306422648277278,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7306422648277278,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5895976431180013;0.5643509962068372;0.6660064814678961;0.6452123217962276;0.7366666666666667;0.7327281546670362;0.5983754512635379;0.5945125379511975;0.958092485549133;0.9546767786204406;0.5135650712264493;0.5059658402906125;9363;2340;0;3;0e771c1190ea4a0ce23c7d5b46c62924
4;0.006006002426147461;0.014513015747070312;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7308028470970191,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7308028470970191,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5810310451786103;0.5665492603686473;0.6581279073935877;0.6471721924285865;0.7335562987736901;0.7329573149502124;0.5970961887477314;0.5965091238807662;0.9508670520231214;0.9503430841459011;0.5109983795680461;0.5098120649487675;9363;2340;0;4;0e771c1190ea4a0ce23c7d5b46c62924
5;0.010814905166625977;0.011739015579223633;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7305331513541935,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7305331513541935,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5798623174176396;0.5668073246997914;0.6534912332095748;0.647357363483171;0.7357541899441341;0.7322472848788638;0.6;0.5957856576413277;0.9509025270758122;0.9497923063030522;0.516246242617404;0.5084909243933562;9362;2341;1;0;0e771c1190ea4a0ce23c7d5b46c62924
6;0.0124969482421875;0.014279842376708984;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7306548782599228,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7306548782599228,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5844497228222285;0.5657203530379703;0.6510299537129495;0.6483573240308511;0.7393233499722685;0.7320870109111126;0.60018009905448;0.5950067781292363;0.9624548736462094;0.95123713202095;0.5167922903795901;0.5069911150300828;9362;2341;1;1;0e771c1190ea4a0ce23c7d5b46c62924
7;0.01303410530090332;0.006886720657348633;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7307385418357586,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7307385418357586,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5482858281841738;0.5748058346592806;0.6367919211545479;0.653027011572256;0.7213578500707214;0.7293366442000709;0.592747559274756;0.6006778076428655;0.921242774566474;0.9281328999638859;0.502941136499538;0.5172829771785957;9362;2341;1;2;0e771c1190ea4a0ce23c7d5b46c62924
8;0.01047825813293457;0.009501934051513672;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7305091218043731,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7305091218043731,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.575593075071952;0.5678753331114558;0.6539503384394659;0.6474727878176284;0.7281851129077224;0.7329747852203674;0.5928279618701771;0.5976762729240233;0.9436416184971098;0.9474539544962081;0.5026785498343289;0.5120276308428753;9363;2340;1;3;0e771c1190ea4a0ce23c7d5b46c62924
9;0.00644230842590332;0.006781816482543945;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7302683791643506,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7302683791643506,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5578582635983264;0.5720461363791935;0.6524224048355145;0.6471339088731213;0.7241867043847242;0.7309401227166937;0.595072059507206;0.5996991088994329;0.9248554913294798;0.9357168652943301;0.5068838126103465;0.515701569902067;9363;2340;1;4;0e771c1190ea4a0ce23c7d5b46c62924
10;0.007794857025146484;0.007328033447265625;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7304461535665971,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7304461535665971,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5768575442200504;0.5676500216605816;0.660881716434566;0.6466622627938006;0.7319932998324958;0.7320954907161804;0.5967228038233955;0.5966549095460234;0.9465703971119134;0.9470832580819939;0.5098960772170446;0.5101429362305394;9362;2341;2;0;0e771c1190ea4a0ce23c7d5b46c62924
11;0.012550830841064453;0.0070760250091552734;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7305622183915172,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7305622183915172,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5779443529749407;0.567260296448963;0.652620139104384;0.6484920078676176;0.731952993844432;0.7322625698324022;0.5975331201461854;0.596948650802687;0.9444043321299639;0.9469026548672567;0.5114281074875761;0.5107062293944127;9362;2341;2;1;0e771c1190ea4a0ce23c7d5b46c62924
12;0.007024288177490234;0.007731914520263672;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7306894667324904,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7306894667324904,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5558064701227946;0.5725920031777404;0.6358945007791422;0.6508383881539849;0.7264018033248802;0.7304077450356865;0.5953810623556582;0.6000232207128758;0.9313583815028902;0.9331888768508487;0.507998939967746;0.5161498777559683;9362;2341;2;2;0e771c1190ea4a0ce23c7d5b46c62924
13;0.006886959075927734;0.00957632064819336;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7305004414376747,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7305004414376747,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5700307761143493;0.569306915736079;0.6557522966732534;0.6469084384371049;0.7351623740201568;0.7303386509935629;0.600091407678245;0.5961846013251085;0.9486994219653179;0.9423979776092453;0.5167137277190607;0.5091074855366488;9363;2340;2;3;0e771c1190ea4a0ce23c7d5b46c62924
14;0.006618022918701172;0.016324996948242188;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7304869935182637,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7304869935182637,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5651929100055626;0.5705182022249131;0.6421553190104641;0.6505998988349717;0.7273752466873414;0.7299690750632556;0.5963938973647711;0.5975834292289989;0.9320809248554913;0.937703141928494;0.5094505042687498;0.5117273879577111;9363;2340;2;4;0e771c1190ea4a0ce23c7d5b46c62924
15;0.006905794143676758;0.009057044982910156;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7306022115979585,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7306022115979585,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5809808467894204;0.5665232228584649;0.6635296350510413;0.6459085959603659;0.7318576632109834;0.7327670240913522;0.597985347985348;0.5962606232294617;0.9429602888086642;0.9503341159472639;0.51227512348383;0.5094154239867038;9362;2341;3;0;0e771c1190ea4a0ce23c7d5b46c62924
16;0.00939798355102539;0.009384870529174805;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.730615653571937,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.730615653571937,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5595301572436294;0.5719605128186968;0.6408318054492398;0.6508234584120672;0.7279391034677192;0.7295295860074759;0.597132284921369;0.5984725757926406;0.932129963898917;0.9340798266209138;0.5105210488950652;0.5134451420686268;9362;2341;3;1;0e771c1190ea4a0ce23c7d5b46c62924
17;0.013871192932128906;0.0074367523193359375;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7305004701000658,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7305004701000658,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5629216723745327;0.5706289825639816;0.6453727615511446;0.6479786541822612;0.731515321900478;0.729588963963964;0.5987114588127014;0.5978085351787774;0.940028901734104;0.9358974358974359;0.5144240642421827;0.5120125254800987;9362;2341;3;2;0e771c1190ea4a0ce23c7d5b46c62924
18;0.006811857223510742;0.012891292572021484;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7305050176818194,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7305050176818194,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5702510913730137;0.5692367882508728;0.6461108997346301;0.6504050895221833;0.7280873704844582;0.731286795626577;0.594421582075903;0.597594501718213;0.9393063583815029;0.9420368364030336;0.505741045299538;0.511802731927007;9363;2340;3;3;0e771c1190ea4a0ce23c7d5b46c62924
19;0.009993314743041992;0.02443385124206543;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7304788139853376,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7304788139853376,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5709127929474932;0.5688943414129827;0.6475096004322846;0.6482929396040781;0.7356064840693125;0.7310354471089981;0.5998176845943483;0.5964632059326869;0.9508670520231214;0.9440231130371975;0.5162285050910586;0.5096586153421282;9363;2340;3;4;0e771c1190ea4a0ce23c7d5b46c62924
20;0.006331920623779297;0.009228944778442383;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7304819828719505,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7304819828719505,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5819052761959428;0.5663878766845971;0.6580181043431733;0.6472010401276822;0.7347620372947398;0.7326553357481193;0.5978260869565217;0.5963261140718903;0.9530685920577617;0.9497923063030522;0.5120991495853662;0.5095366760273431;9362;2341;4;0;0e771c1190ea4a0ce23c7d5b46c62924
21;0.014345884323120117;0.01526498794555664;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7304674280867605,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7304674280867605,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5787928794767608;0.5670886407660409;0.6647832647862137;0.6459780605430272;0.7354409317803661;0.732482744195775;0.5970283656010806;0.5965250965250966;0.9574007220216606;0.9487086870146288;0.5106041267012069;0.50990989906287;9362;2341;4;1;0e771c1190ea4a0ce23c7d5b46c62924
22;0.02120518684387207;0.008049726486206055;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.730342191298754,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.730342191298754,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5614728106256908;0.5713889468125133;0.6466836004836554;0.6508456834664582;0.7271186440677966;0.7303687025049254;0.5969387755102041;0.5983398662670049;0.9299132947976878;0.9371614301191766;0.5109336588930968;0.513036782005195;9362;2341;4;2;0e771c1190ea4a0ce23c7d5b46c62924
23;0.006838083267211914;0.00693202018737793;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7305089297643343,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7305089297643343,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5703349850049579;0.5688953327809998;0.6444829115086808;0.6483916838278372;0.7330164942689404;0.7316390114121684;0.5978112175102599;0.5974842767295597;0.9472543352601156;0.9434814012278802;0.5123300965003507;0.5116099816596917;9363;2340;4;3;0e771c1190ea4a0ce23c7d5b46c62924
24;0.02894282341003418;0.008808135986328125;"Pipeline(steps=[('set_column_types',
                 SetColumnTypes(X_types={'continuous': ['Sex-0.0',
                                                        'AgeAtScan']})),
                ('zscore',
                 JuColumnTransformer(apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                                     copy=True, name='zscore',
                                     transformer=StandardScaler(),
                                     with_mean=True, with_std=True)),
                ('logithc',
                 WrapModel(C=0.7309024956172057,
                           apply_to=ColumnTypes<types={'*'}; pattern=.*>,
                           class_weight=None, dual=False, fit_intercept=True,
                           intercept_scaling=1, l1_ratio=None, max_iter=100,
                           model=LogisticRegressionHeuristicC(C=0.7309024956172057,
                                                              penalty='l1',
                                                              solver='liblinear'),
                           multi_class='deprecated', n_jobs=None, penalty='l1',
                           random_state=None, solver='liblinear', tol=0.0001,
                           verbose=0, warm_start=False))])";0.5492440503543183;0.573932851339645;0.6306724150096823;0.650927957207596;0.7210496292070736;0.7303633401798995;0.5956644674835061;0.6008623703531057;0.9132947976878613;0.9310220296135789;0.5079026289694536;0.5177985965061359;9363;2340;4;4;0e771c1190ea4a0ce23c7d5b46c62924
